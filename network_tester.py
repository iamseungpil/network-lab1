#!/usr/bin/env python3
"""
SDN ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏÑ± ÌÖåÏä§Ìä∏ ÎèÑÍµ¨
Mininet CLI ÏóÜÏù¥ Ìò∏Ïä§Ìä∏ Í∞Ñ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï† Ïàò ÏûàÎäî ÎèÖÎ¶ΩÏ†ÅÏù∏ ÌÖåÏä§Ìä∏ ÎèÑÍµ¨
"""

import subprocess
import time
import sys
import json
from datetime import datetime

class NetworkTester:
    def __init__(self):
        self.results = {}
        
    def ping_test(self, src_ip, dst_ip, count=1, timeout=3):
        """ÌäπÏ†ï IP Í∞Ñ ping ÌÖåÏä§Ìä∏"""
        try:
            cmd = f"ping -c {count} -W {timeout} {dst_ip}"
            result = subprocess.run(cmd.split(), capture_output=True, text=True, timeout=timeout+2)
            
            if result.returncode == 0:
                # ÏÑ±Í≥µ Ïãú RTT Ï∂îÏ∂ú
                lines = result.stdout.split('\n')
                for line in lines:
                    if 'time=' in line:
                        rtt = line.split('time=')[1].split(' ')[0]
                        return {'success': True, 'rtt': rtt, 'output': result.stdout}
                return {'success': True, 'rtt': 'unknown', 'output': result.stdout}
            else:
                return {'success': False, 'error': result.stderr, 'output': result.stdout}
                
        except Exception as e:
            return {'success': False, 'error': str(e), 'output': ''}
    
    def test_host_connectivity(self, host_pairs):
        """Ìò∏Ïä§Ìä∏ ÏåçÎì§ Í∞ÑÏùò Ïó∞Í≤∞ÏÑ± ÌÖåÏä§Ìä∏"""
        print("üîç SDN Network Connectivity Test")
        print("=" * 50)
        print(f"‚è∞ Test Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        results = {}
        
        for src, dst in host_pairs:
            src_name, src_ip = src
            dst_name, dst_ip = dst
            
            print(f"üì° Testing {src_name}({src_ip}) ‚Üí {dst_name}({dst_ip})... ", end="", flush=True)
            
            result = self.ping_test(src_ip, dst_ip, count=1, timeout=2)
            
            if result['success']:
                print(f"‚úÖ SUCCESS ({result['rtt']}ms)")
                results[f"{src_name}->{dst_name}"] = {'status': 'SUCCESS', 'rtt': result['rtt']}
            else:
                print(f"‚ùå FAILED")
                results[f"{src_name}->{dst_name}"] = {'status': 'FAILED', 'error': result.get('error', 'Unknown')}
                
            time.sleep(0.5)  # ÌÖåÏä§Ìä∏ Í∞Ñ Í∞ÑÍ≤©
        
        return results
    
    def test_controller_areas(self):
        """PrimaryÏôÄ Secondary Controller ÏòÅÏó≠ Í∞Ñ ÌÖåÏä§Ìä∏"""
        # Primary Controller ÏòÅÏó≠ (h1-h10)
        primary_hosts = [
            ('h1', '10.0.0.1'), ('h2', '10.0.0.2'), ('h3', '10.0.0.3'), ('h4', '10.0.0.4'),
            ('h5', '10.0.0.5'), ('h6', '10.0.0.6'), ('h7', '10.0.0.7'), ('h8', '10.0.0.8'),
            ('h9', '10.0.0.9'), ('h10', '10.0.0.10')
        ]
        
        # Secondary Controller ÏòÅÏó≠ (h11-h20)  
        secondary_hosts = [
            ('h11', '10.0.0.11'), ('h12', '10.0.0.12'), ('h13', '10.0.0.13'), ('h14', '10.0.0.14'),
            ('h15', '10.0.0.15'), ('h16', '10.0.0.16'), ('h17', '10.0.0.17'), ('h18', '10.0.0.18'),
            ('h19', '10.0.0.19'), ('h20', '10.0.0.20')
        ]
        
        test_pairs = []
        
        # 1. Í∞ôÏùÄ Ïª®Ìä∏Î°§Îü¨ ÎÇ¥ ÌÖåÏä§Ìä∏
        print("üè† Same Controller Tests:")
        test_pairs.extend([
            (primary_hosts[0], primary_hosts[1]),    # h1 -> h2
            (primary_hosts[2], primary_hosts[3]),    # h3 -> h4
            (secondary_hosts[0], secondary_hosts[1]), # h11 -> h12
            (secondary_hosts[2], secondary_hosts[3]), # h13 -> h14
        ])
        
        # 2. ÌÅ¨Î°úÏä§ Ïª®Ìä∏Î°§Îü¨ ÌÖåÏä§Ìä∏
        print("\nüåê Cross-Controller Tests:")
        cross_tests = [
            (primary_hosts[0], secondary_hosts[1]),  # h1 -> h12
            (primary_hosts[4], secondary_hosts[0]),  # h5 -> h11
            (secondary_hosts[1], primary_hosts[0]),  # h12 -> h1
            (secondary_hosts[5], primary_hosts[2]),  # h16 -> h3
        ]
        
        # Í∞ôÏùÄ Ïª®Ìä∏Î°§Îü¨ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
        same_controller_results = self.test_host_connectivity(test_pairs[:4])
        
        print("\n" + "="*50)
        
        # ÌÅ¨Î°úÏä§ Ïª®Ìä∏Î°§Îü¨ ÌÖåÏä§Ìä∏ Ïã§Ìñâ  
        cross_controller_results = self.test_host_connectivity(cross_tests)
        
        return {
            'same_controller': same_controller_results,
            'cross_controller': cross_controller_results
        }
    
    def check_controller_status(self):
        """Ïª®Ìä∏Î°§Îü¨ Ïã§Ìñâ ÏÉÅÌÉú ÌôïÏù∏"""
        print("üîß Controller Status Check:")
        print("-" * 30)
        
        try:
            # Primary Controller ÌôïÏù∏
            result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
            primary_running = 'primary_controller.py' in result.stdout and '6700' in result.stdout
            secondary_running = 'secondary_controller.py' in result.stdout and '6800' in result.stdout
            
            print(f"Primary Controller (6700):   {'üü¢ RUNNING' if primary_running else 'üî¥ STOPPED'}")
            print(f"Secondary Controller (6800): {'üü¢ RUNNING' if secondary_running else 'üî¥ STOPPED'}")
            print()
            
            return primary_running and secondary_running
            
        except Exception as e:
            print(f"‚ùå Error checking controllers: {e}")
            return False
    
    def generate_report(self, results):
        """ÌÖåÏä§Ìä∏ Í≤∞Í≥º Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        print("\nüìä Test Summary Report")
        print("=" * 50)
        
        total_tests = 0
        successful_tests = 0
        
        for category, tests in results.items():
            print(f"\n{category.replace('_', ' ').title()}:")
            for test_name, result in tests.items():
                total_tests += 1
                if result['status'] == 'SUCCESS':
                    successful_tests += 1
                    print(f"  ‚úÖ {test_name}: {result['rtt']}ms")
                else:
                    print(f"  ‚ùå {test_name}: FAILED")
        
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        print(f"\nüìà Overall Success Rate: {success_rate:.1f}% ({successful_tests}/{total_tests})")
        
        return success_rate

def main():
    tester = NetworkTester()
    
    print("üöÄ SDN Network Connectivity Tester")
    print("=" * 50)
    
    # 1. Ïª®Ìä∏Î°§Îü¨ ÏÉÅÌÉú ÌôïÏù∏
    if not tester.check_controller_status():
        print("‚ö†Ô∏è  Warning: Controllers may not be running properly")
        print("   Please ensure both controllers are started before testing")
        print()
    
    # 2. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏÑ± ÌÖåÏä§Ìä∏
    try:
        results = tester.test_controller_areas()
        
        # 3. Í≤∞Í≥º Î¶¨Ìè¨Ìä∏
        success_rate = tester.generate_report(results)
        
        # 4. Í≤∞Í≥ºÎ•º JSONÏúºÎ°ú Ï†ÄÏû•
        with open('network_test_results.json', 'w') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'results': results,
                'success_rate': success_rate
            }, f, indent=2)
        
        print(f"\nüíæ Detailed results saved to: network_test_results.json")
        
        # 5. Ï¢ÖÎ£å ÏΩîÎìú Î∞òÌôò
        sys.exit(0 if success_rate >= 80 else 1)
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Test interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()